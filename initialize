from pyproj import Geod

# 이미 calibration 된 데이터에서 initailize한 한부분을 df로 받음
def initialize(df, linear_slope=True, reverse = False):

    df["TimeStamp"] = pd.to_datetime(df["datetime"], format="%Y-%m-%d %H:%M:%S")
    df["UnixTime"] = df["TimeStamp"].apply(lambda x: x.timestamp())

    data = np.array([tuple(x) for x in np.vstack( \
                (df['UnixTime'], \
                    df['numSV'], \
                    df['height'], \
                    df['Speed'], \
                    df['AccelX'], \
                    df['AccelY'], \
                    df['AccelZ'], \
                    df['AngleRateX'], \
                    df['AngleRateY'], \
                    df['AngleRateZ'], \
                    df["headMot"], \
                    df["lat"], \
                    df["lon"],
                    )).T], \

                dtype = [('TimeStamp', None), \
                        ('numSV', None), \
                        ('Height', None), \
                        ('Speed', None), \
                        ('AccelX', None), \
                        ('AccelY', None), \
                        ('AccelZ', None), \
                        ('AngleRateX', None), \
                        ('AngleRateY', None), \
                        ('AngleRateZ', None), \
                        ('Heading', None),  \
                        ('Lat', None), \
                        ('Lon', None),
                        ])

    # 변화량은 소문자로 표기, 합친 값은 대문자로 표기기
    delta_p = {
        "heading": np.zeros(len(data)-1),
        "Slope" :  np.zeros(len(data)-1),
        "speed" :  np.zeros(len(data)-1),
        "x" : np.zeros(len(data)-1),
        "y" :  np.zeros(len(data)-1),
        "height" :  np.zeros(len(data)-1),
    }

    # 원통형 좌표계로 start_point, end_point 변환

    geod = Geod(ellps="WGS84")

    time_delta = np.diff(data["TimeStamp"])
    #time_delta = np.insert(time_delta, 0, time_delta[0])[:-1]

    dt = data.dtype.descr.copy()
    dt.append(('Slope', '<f8'))
    dt.append(('X', '<f8'))
    dt.append(('Y', '<f8'))
    
    start_point = data[0].copy()
    end_point = data[-1].copy()
    
    start_point = np.zeros(1, dtype=dt)[0]
    end_point = np.zeros(1, dtype=dt)[0]

    for name in data.dtype.names:
        start_point[name] = data[name][0]
        end_point[name] = data[name][-1]

    start_point["Slope"] = np.arctan2((data["Height"][1] - data["Height"][0]), (data["Speed"][0] * time_delta[0]))
    end_point["Slope"] = np.arctan2((data["Height"][-1] - data["Height"][-2]), (data["Speed"][-1] * time_delta[-1]))

    azimuth, _, distance = geod.inv(start_point["Lon"], start_point["Lat"], end_point["Lon"], end_point["Lat"])
    azimuth_rad = np.radians(azimuth)
    
    
    start_point["X"] = 0
    end_point["X"] = distance * np.sin(azimuth_rad)
    start_point["Y"] = 0
    end_point["Y"] =  distance * np.cos(azimuth_rad)
    
    # initialize 하기 전에 각속도는 일단 MA 쳐야함. 마지막의 None 값은 data의 값 그대로 사용
    window_size_yaw = 1
    window_size_pitch = 10
    
    def ma_concat(data, ma, window_size):
        data_MA = np.full(len(data), np.nan)

        # 시작과 끝 부분 처리
        data_MA[-(window_size):] = data[-(window_size):] / window_size
        data_MA[:-(window_size)] = ma[:-(window_size)]

        return data_MA
    
    # Heading diff = - Yaw Rate, window 1로 그대로 사용
    Yaw_MA = -np.roll(df["AngleRateZ"].rolling(window_size_yaw).mean(), -window_size_yaw).copy()
    # Slope ~ Pitch Rate
    Pitch_MA = np.roll(df["AngleRateY"].rolling(window_size_pitch).mean(), -window_size_pitch).copy() / window_size_pitch

    Yaw_MA = ma_concat(data["AngleRateZ"], Yaw_MA, window_size_yaw)[:-1]
    Pitch_MA = ma_concat(data["AngleRateY"], Pitch_MA, window_size_pitch)[:-1]
    Accx_MA = data["AccelX"].copy()[:-1]

    if reverse:
        start_point, end_point = end_point.copy(), start_point.copy()

        # radius 축을 North로 잡으면 theta 둘 필요 없음. 사용하고 있지 않기도 함.
        # start_point["X"] = 0
        # end_point["X"] = distance
        # start_point["Y"] = 0
        # end_point["Y"] =  - (end_point["Heading"] - start_point["Heading"])

        for point in [start_point, end_point]:
            point["Heading"] = point["Heading"] + np.pi
            point["Slope"] = - point["Slope"]

        Yaw_MA = np.flip(Yaw_MA)
        Pitch_MA = np.flip(Pitch_MA)
        Accx_MA = np.flip(Accx_MA)
        time_delta = np.flip(time_delta)

    def init_heading(heading_array, Yaw_MA, time_delta):
        heading_array[:] = Yaw_MA/80 * time_delta
        if reverse:
            heading_array[:] = - Yaw_MA/80 * time_delta
        return heading_array

    def init_slope(slope_array, Pitch_MA, time_delta):
        """
        pitch rate로는 slope 를 파악하기 어려워 해당 함수 사용안함
        """
        slope_array[:] = Pitch_MA #* time_delta
        if reverse:
            slope_array[:] = - Pitch_MA #* time_delta
        slope_array = np.diff(slope_array)
        slope_array = np.insert(slope_array, 0, 0)

        return slope_array

    def init_speed(start_point, speed_array, Accx_MA, slope_array, time_delta):
        Slope_array = slope_array #start_point["Slope"] + np.cumsum(slope_array)
        if not reverse:
            speed_array[:] = (Accx_MA - 9.814 * np.sin(Slope_array)) * np.cos(Slope_array) * time_delta
        else :
            speed_array[:] = - (Accx_MA - 9.814 * np.sin(-Slope_array)) * np.cos(-Slope_array) * time_delta
        return speed_array

    def init_height(start_point, height_array, speed_array, slope_array, time_delta):

        Slope_array = slope_array #start_point["Slope"] + np.cumsum(slope_array)
        Speed_array = start_point["Speed"] + np.cumsum(speed_array)
        height_array[:] = Speed_array * np.tan(Slope_array) * np.abs(time_delta)

        return height_array

    def init_x_y(start_point, x_array, y_array, speed_array, heading_array, time_delta):
        Speed_array = start_point["Speed"] + np.cumsum(speed_array)
        Heading_array = start_point["Heading"] + np.cumsum(heading_array)
        x_array[:] = Speed_array * np.sin(Heading_array) * time_delta
        y_array[:] = Speed_array * np.cos(Heading_array) * time_delta
        
        return x_array, y_array

    def now_value(array, idx):
        sum_array = array.cumsum()
        return sum_array[idx]
    
    
    delta_p["heading"] = init_heading(delta_p["heading"], Yaw_MA, time_delta)

     # 단순 끝점 간 고도 차로 linear 하게 초기 slope 생성, delta slope는 전부 0으로 초기화. slope_s를 해당 slope 값으로 설정
    if linear_slope == True:
        delta_p["Slope"] = np.arctan2(end_point["Height"] - start_point["Height"], start_point["Speed"] * np.sum(time_delta))*np.ones(len(data)-1)
    else:
        delta_p["Slope"] = init_slope(delta_p["Slope"], Pitch_MA, time_delta)
    delta_p["speed"] = init_speed(start_point, delta_p["speed"], Accx_MA, delta_p["Slope"], time_delta)
    delta_p["height"] = init_height(start_point, delta_p["height"], delta_p["speed"], delta_p["Slope"], time_delta)
    delta_p["x"], delta_p["y"] = init_x_y(start_point, delta_p["x"], delta_p["y"], delta_p["speed"], delta_p["heading"], time_delta)

    return start_point, end_point, delta_p, time_delta

def bi_direction(s, e, delta_s, delta_e, alpha = 2):
    # 양방향으로 초기 값 생성하고, 내분해서 최종 초기화
    path_s = {}
    path_e = {}
    path_bi = {}

    delta_e_s = {}
    delta_bi = {}

    N_ = len(delta_s["heading"]) + 1
    t_values = np.linspace(alpha/(N_), (N_-alpha)/(N_), N_) #np.linspace(1/(N_+1), N_/(N_+1), N_)
    
    # t_values = np.linspace(0 + 0.2, np.pi - 0.2, N_)
    # t_values = (1 - np.cos(t_values)) / 2

    s["Heading"] = s["Heading"] % (2 * np.pi)
    
    e_e = e.copy()
    e_e["Heading"] = e["Heading"] + np.pi

    for col, delta_col in zip(["Height", "Speed", "Heading", "X", "Y"],
                ["height", "speed", "heading", "x", "y"]):
        path_s[col] = s[col] + np.cumsum(delta_s[delta_col])
        path_e[col] = (e_e[col] + np.cumsum(delta_e[delta_col]))[::-1]

    path_s["Slope"] = delta_s["Slope"]
    path_e["Slope"] = delta_e["Slope"]
    
    for col in ["Height", "Speed", "Heading", "X", "Y", "Slope"]:
        path_s[col] = np.insert(path_s[col], 0, s[col])
        path_e[col] = np.append(path_e[col], e_e[col])
        

    path_e_s = path_e.copy()
    path_e_s["Heading"] = path_e_s["Heading"] - np.pi
    path_e_s["Slope"] = - path_e_s["Slope"] 
        
    # display(path_e_s["Heading"])
    # display(path_s["Heading"])
    
    def head(x, y):
        azimuth = np.arctan(x/y)
        if azimuth < 0 :
            azimuth += np.pi
            
        if x < 0 :
            azimuth += np.pi

        return azimuth
        
    
    for col, delta_col in zip(["Height",  "X", "Y", "Heading",],
                ["height", "x", "y", "heading",]):
        if col != "Heading":
            path_bi[col] = (1 - t_values) * path_s[col]  + t_values * path_e_s[col]
        else:
            
            x = np.diff(path_bi["X"])
            y = np.diff(path_bi["Y"])
            
            smooth_heading = np.array([head(x_, y_) for x_,y_ in zip(x, y)])
            
            smooth_heading = smooth_heading % (2 * np.pi)
            # display(smooth_heading)
            
            path_bi[col] = np.insert(smooth_heading, 0, s["Heading"])
    
    for col, delta_col in zip(["Height", "Heading", "X", "Y", "Speed", "Slope",  ],
                ["height", "heading", "x", "y", "speed", "Slope",  ]):

        if (col != "Slope") and (col != "Speed"):
            delta_bi[delta_col] = np.diff(path_bi[col]) #
            delta_e_s[delta_col] = np.diff(path_e_s[col])
        elif (col == "Slope"):
            delta_bi[delta_col] = np.arctan2(delta_bi["height"], (s["Speed"] + np.cumsum(delta_bi["speed"] + 1e-10)))
            delta_e_s[delta_col] = np.arctan2(delta_e_s["height"], (s["Speed"] + np.cumsum(delta_e_s["speed"] + 1e-10)))
        else :
            
            delta_bi[delta_col] = np.diff(np.insert(np.sqrt(delta_bi["y"] **2 + delta_bi["x"]**2), 0, s[col])) 
            delta_e_s[delta_col] = np.diff(np.insert(np.sqrt(delta_bi["y"] **2 + delta_bi["x"]**2), 0, s[col]))
    
    # delta_e_s의 경우 초기 값이 e -> s기준으로 변환된 좌표계에서의 s 예측값이므로, s와 다름
    # 이를 보정해주기 위해 s 기준으로 변환된 s 예측값 성분 - s 성분을 더해, s 성분에 해당 초기값 더하면 올바른 경로 생성되도록 함.
    for col, delta_col in zip(["Height", "Heading", "X", "Y", "Speed", "Slope",  ],
                ["height", "heading", "x", "y", "speed", "Slope", ]):
        delta_e_s[delta_col][0] += (path_e_s[col][0] - s[col])
    
    delta_bi["heading"] = np.unwrap(delta_bi["heading"])
    delta_e_s["heading"] = np.unwrap(delta_e_s["heading"])
    
    return  path_bi, path_e_s, delta_bi, delta_e_s


%matplotlib inline
def visuallize(s, e, delta_p, ref_GPS = None):
    geod = Geod(ellps="WGS84")
    def r_cal(lat, lon):
        azimuth, _, distance = geod.inv(s["Lon"], s["Lat"], lon, lat)
        return [np.radians(azimuth), distance]
    
    if ref_GPS is None:
        pass
    else:
        r_cal_ = [r_cal(lat, lon) for lat, lon in zip(np.array(ref_GPS["lat"]), np.array(ref_GPS["lon"]))]
        ref_numSV = np.array(ref_GPS["numSV"])
        ref_theta = np.array([r_cal[0] for r_cal in r_cal_])
        ref_radius = np.array([r_cal[1] for r_cal in r_cal_])
        ref_height = np.array(ref_GPS["height"])
        ref_speed = np.array(ref_GPS["Speed"])
        ref_heading = np.array(ref_GPS["headMot"])
        ref_x = ref_radius * np.sin(ref_theta)
        ref_y = ref_radius * np.cos(ref_theta)
        ref_z = ref_height
        
        
    for col, delta_col in zip(["Height", "Speed", "Heading", "Slope", "X", "Y",],
                ["height", "speed", "heading", "Slope", "x", "y", ]):
        if col not in ["Slope"]:
            print(col, "diff as", e[col] - s[col], " ", "estimated as", np.sum(delta_p[delta_col]))
        else:
            print(col, "diff as", e[col] - s[col], " ", "estimated as", delta_p[delta_col][-1])

    print("start", f"heading : {s['Heading']}", f"X : {s['X']}", f"Y : {s['Y']}", f"height : {s['Height']}", f"slope : {s['Slope']}", f"speed : {s['Speed']}",)
    print("end", f"heading : {e['Heading']}", f"X : {e['X']}", f"Y : {e['Y']}", f"height : {e['Height']}", f"slope : {e['Slope']}", f"speed : {e['Speed']}",)
    print("estimated end", f"heading : {s['Heading'] + np.sum(delta_p['heading'])}", f"X : {s['X'] + np.sum(delta_p['x'])}", f"Y : {s['Y'] + np.sum(delta_p['y'])}", f"height : {s['Height']+ np.sum(delta_p['height'])}", f"slope : {delta_p['Slope'][-1]}", f"speed : {s['Speed']+ np.sum(delta_p['speed'])}",)
    
    x = s["X"] + np.cumsum(delta_p["x"])
    y = s["Y"] + np.cumsum(delta_p["y"])
    z = s["Height"] + np.cumsum(delta_p["height"])
    head = s["Heading"] + np.cumsum(delta_p["heading"])
    speed = s["Speed"] + np.cumsum(delta_p["speed"])
    
    if ref_GPS is not None:
        print("--------------------")
        
        normal_idx = np.where(ref_numSV[:-1] > 0)
        x_diff = np.sqrt((ref_x[1:][normal_idx] - x[normal_idx])**2)
        y_diff = np.sqrt((ref_y[1:][normal_idx] - y[normal_idx])**2)
        z_diff = np.sqrt((ref_z[1:][normal_idx] - z[normal_idx])**2)
        speed_diff = np.sqrt((ref_speed[1:][normal_idx] - speed[normal_idx])**2)
        # display(ref_heading)
        # display(head)
        head_diff = np.sqrt(((ref_heading[1:] - head) % (2*np.pi))** 2)
        head_diff = np.abs((head_diff + np.pi) % (2 * np.pi) - np.pi )
        
        x_diff = x_diff[~np.isnan(x_diff)]
        y_diff = y_diff[~np.isnan(y_diff)]
        r_diff = np.sqrt(x_diff**2 + y_diff**2)
        z_diff = z_diff[~np.isnan(z_diff)]
        head_diff = head_diff[~np.isnan(head_diff)]
        speed_diff = speed_diff[~np.isnan(speed_diff)]
        
        print(f"x diff as {x_diff}")
        print(f"y diff as {y_diff}")
        print(f"r diff as {r_diff}")
        print(f"h diff as {z_diff}")
        print(f"speed diff as {speed_diff}")
        print(f"head diff as {head_diff}")
        
        print(f"avg x diff as {np.mean(x_diff)} m")
        print(f"avg y diff as {np.mean(y_diff)} m")
        print(f"avg r diff as {np.mean(r_diff)} m")
        print(f"avg h diff as {np.mean(z_diff)} m")
        print(f"avg speed diff as {np.mean(speed_diff)} m/s")
        print(f"avg heading diff as {np.mean(head_diff)} rad")
        
        # DSN, mileage, 경사도 비율 (?)
        
        mileage_ref = np.sum(ref_speed[1:][normal_idx])
        mileage_opt = np.sum(speed[normal_idx])
        
        print(f"mileage) ref: {mileage_ref}, opt: {mileage_opt}, error: {(mileage_ref - mileage_opt)*100/mileage_ref} %")
        
        if ("AccelX" in ref_GPS.columns) :
            DSNX_ref = np.sum(ref_GPS["AccelX"]**2) / mileage_ref
            DSNX_opt = np.sum(ref_GPS["AccelX"]**2) / mileage_opt
            
            DSNY_ref = np.sum(ref_GPS["AccelY"][1:]**2) / mileage_ref
            DSNY_opt = np.sum(ref_GPS["AccelY"][1:]**2) / mileage_opt
            
            print(f"DSNX) ref: {DSNX_ref}, opt: {DSNX_opt}, error: {(DSNX_ref - DSNX_opt)*100/DSNX_ref} %")
            print(f"DSNY) ref: {DSNY_ref}, opt: {DSNY_opt}, error: {(DSNY_ref - DSNY_opt)*100/DSNY_ref} %")

    s_x, s_y = s["X"], s["Y"]
    e_x, e_y = e["X"], e["Y"]

    m_idx = len(delta_p["height"]) // 2
    m_x, m_y, m_z = x[m_idx], y[m_idx], z[m_idx]

    fig = plt.figure(figsize=(18, 9))
    ax = fig.add_subplot(121, projection='3d')
    ax.scatter(x, y, z, s=12, label='Path')
    
    if ref_GPS is not None:
        ax.scatter(ref_x, ref_y, ref_z, s=8, color="orange", label='ref Path')

    ax.scatter(s_x, s_y,
            s["Height"],
            color='red', s=250, alpha=0.3)
    ax.scatter(e_x, e_y,
            e["Height"],
            color='blue', s=250, alpha=0.3)
    ax.scatter(m_x, m_y,
            m_z,
            color='green', s=250, alpha=0.3)
    
    ax.scatter(s_x, s_y,
            s["Height"],
            color='red', s=4, label='Start Point')
    ax.scatter(e_x, e_y,
            e["Height"],
            color='blue', s=4, label='End Point')
    ax.scatter(m_x, m_y,
            m_z,
            color='green', s=4, label='Middle Point')

    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Height')
    ax.set_title('Cylindrical Coordinate 3D')
    ax.legend()

    az = fig.add_subplot(122)

    az.scatter(x, y, label='Path', s = 12)
    if ref_GPS is not None:
        az.scatter(ref_x, ref_y, s=8, color="orange", label='ref Path')
        
    az.scatter(s_x, s_y, color='red', s=250, alpha=0.3)
    az.scatter(e_x, e_y, color='blue', s=250, alpha=0.3)
    az.scatter(m_x, m_y, color='green', s=250, alpha=0.3)
    az.scatter(s_x, s_y, color='red', s=4, label='Start Point')
    az.scatter(e_x, e_y, color='blue', s=4, label='End Point')
    az.scatter(m_x, m_y, color='green', s=4, label='Middle Point')
    az.set_title('Cylindrical Coordinate 2D (North = Heading 0)')
    az.set_xlabel('East-West (X)')
    az.set_ylabel('North-South (Y)')

    # 그래프 크기 고정 (500x500)
    min_ = min(s_x, e_x, s_y, e_y)
    max_ = max(s_x, e_x, s_y, e_y)
    az.set_xlim(min_ - 300, max_+300)
    az.set_ylim(min_ - 300, max_+300)
    az.grid(True)
    az.legend()

    plt.show()


data_ = result[0]
data_ = acc_file[2530:2550].copy()
s, e, delta_s, time_delta_s = initialize(data_, linear_slope=True)
ss, ee, delta_e, time_delta_e = initialize(data_, reverse=True, linear_slope=True)

path_bi, path_e_s, delta_bi, delta_e_s = bi_direction(s, e, delta_s, delta_e, alpha=4)

visuallize(s, e, delta_s, data_[["lat", "lon", "headMot", "height", "Speed", "numSV", "AccelX", "AccelY"]])
visuallize(s, e, delta_e_s, data_[["lat", "lon", "headMot", "height", "Speed","numSV", "AccelX", "AccelY"]])
visuallize(s, e, delta_bi, data_[["lat", "lon", "headMot", "height", "Speed","numSV", "AccelX", "AccelY"]])

import numpy as np

# 지구 타원체 파라미터 (WGS84)
a = 6378137.0               # semi-major axis (m)
e2 = 6.69437999014e-3        # eccentricity squared

def geodetic_to_ecef(lat, lon, h):
    """
    지리 좌표 (lat, lon, h)를 ECEF 좌표 (x, y, z)로 변환 (WGS84 기준)
    lat, lon: degree 단위
    h: 고도 (m)
    """
    lat_rad = np.radians(lat)
    lon_rad = np.radians(lon)
    N = a / np.sqrt(1 - e2 * np.sin(lat_rad)**2)
    x = (N + h) * np.cos(lat_rad) * np.cos(lon_rad)
    y = (N + h) * np.cos(lat_rad) * np.sin(lon_rad)
    z = ((1 - e2) * N + h) * np.sin(lat_rad)
    return np.array([x, y, z])

def ecef_to_geodetic(x, y, z):
    """
    ECEF 좌표 (x, y, z)를 지리 좌표 (lat, lon, h)로 변환 (WGS84 기준)
    반환: (lat, lon, h) [lat, lon in degrees, h in meters]
    """
    b = a * np.sqrt(1 - e2)
    ep = np.sqrt((a**2 - b**2)/b**2)
    p = np.sqrt(x**2 + y**2)
    th = np.arctan2(a * z, b * p)
    lon = np.arctan2(y, x)
    lat = np.arctan2(z + ep**2 * b * np.sin(th)**3, p - e2 * a * np.cos(th)**3)
    N = a / np.sqrt(1 - e2 * np.sin(lat)**2)
    h = p / np.cos(lat) - N
    return np.degrees(lat), np.degrees(lon), h

def enu_to_ecef(e, n, u, ref_lat, ref_lon, ref_h):
    """
    ENU 좌표 (e, n, u)를 ECEF 좌표로 변환.
    ref_lat, ref_lon, ref_h: 기준점의 지리 좌표 (degree, degree, m)
    """
    # 기준점의 ECEF 좌표
    ref_ecef = geodetic_to_ecef(ref_lat, ref_lon, ref_h)
    # 기준점의 위도/경도를 radian으로
    lat0 = np.radians(ref_lat)
    lon0 = np.radians(ref_lon)
    # ENU -> ECEF 회전 행렬 (East, North, Up 순)
    R = np.array([[-np.sin(lon0),              np.cos(lon0),             0],
                  [-np.sin(lat0)*np.cos(lon0), -np.sin(lat0)*np.sin(lon0),  np.cos(lat0)],
                  [ np.cos(lat0)*np.cos(lon0),  np.cos(lat0)*np.sin(lon0),  np.sin(lat0)]])
    enu = np.array([e, n, u])
    # ECEF 좌표: 기준점 + 회전 행렬의 전치 * enu 벡터
    ecef = ref_ecef + R.T.dot(enu)
    return ecef

def local_path_to_geodetic(x, y, h, ref):
    """
    로컬 좌표계 (x, y, h)로 구성된 경로를 지리 좌표 (lat, lon, h)로 변환.
    ref: 기준점 사전 (예: {"lat": ..., "lon": ..., "h": ...})
         이 기준점은 로컬 좌표계의 원점으로 가정.
    
    x, y, h: 각각 N개의 점으로 구성된 배열 (예: np.array)
    반환: (lat, lon, h) 좌표 배열 (N x 3)
    """
    ref_lat = ref["lat"]
    ref_lon = ref["lon"]
    ref_h = ref["h"]
    
    geodetic_points = []
    for xi, yi, hi in zip(x, y, h):
        # 여기서 x는 동쪽(East), y는 북쪽(North)으로 가정
        ecef = enu_to_ecef(xi, yi, hi, ref_lat, ref_lon, ref_h)
        lat, lon, alt = ecef_to_geodetic(ecef[0], ecef[1], ecef[2])
        geodetic_points.append([lat, lon, alt])
    
    return np.array(geodetic_points)

# 예시 사용:
if __name__ == '__main__':
    # 기준점: 시작점의 geodetic 좌표 (예: 서울 시청)
    ref = {"lat": 37.5665, "lon": 126.9780, "h": 0.0}
    
    # 예시 로컬 경로 (x, y, h) -- 단위: 미터
    # 예를 들어, x는 동쪽, y는 북쪽, h는 고도 변화
    N = 1
    # 간단한 직선 경로 예: x는 0에서 100 m, y는 0에서 50 m, h는 0에서 10 m 변화
    x = np.linspace(0, 100, N)
    y = np.linspace(0, 50, N)
    h = np.linspace(0, 10, N)
    
    geodetic_path = local_path_to_geodetic(x, y, h, ref)
    
    # 결과 출력: 각 점의 (lat, lon, h)
    for pt in geodetic_path:
        print("Lat: {:.6f}, Lon: {:.6f}, h: {:.2f}".format(pt[0], pt[1], pt[2]))
